{"ast":null,"code":"import _asyncToGenerator from \"/workspaces/amazon-q-developer-challenge/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class McpService {\n  constructor(http) {\n    this.http = http;\n    this.mcpEndpoint = 'ws://localhost:3000/mcp'; // MCP WebSocket endpoint\n  }\n  sendMigrationRequest(code, fromLang, toLang) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // Simula√ß√£o da conex√£o MCP - substitua pela implementa√ß√£o real\n      const prompt = `Migre este c√≥digo de ${fromLang} para ${toLang}:\\n\\n${code}`;\n      try {\n        // Aqui voc√™ conectaria com o MCP real da AWS\n        // const response = await this.connectToMCP(prompt);\n        // Simula√ß√£o por enquanto\n        return _this.simulateResponse(code, fromLang, toLang);\n      } catch (error) {\n        throw new Error('Falha na conex√£o com MCP');\n      }\n    })();\n  }\n  simulateResponse(code, fromLang, toLang) {\n    return `// Migra√ß√£o de ${fromLang} para ${toLang}\n// C√≥digo original analisado e convertido\n\n${this.generateMockMigration(code, toLang)}\n\n// ‚úÖ Migra√ß√£o conclu√≠da\n// üí° Dica: Revise as diferen√ßas de sintaxe e bibliotecas`;\n  }\n  generateMockMigration(code, toLang) {\n    const migrations = {\n      'typescript': `// TypeScript version\ninterface User {\n  name: string;\n  age: number;\n}\n\nconst processUser = (user: User): void => {\n  console.log(\\`Processing \\${user.name}\\`);\n};`,\n      'python': `# Python version\nfrom typing import Dict, Any\n\ndef process_user(user: Dict[str, Any]) -> None:\n    print(f\"Processing {user['name']}\")`,\n      'go': `// Go version\npackage main\n\nimport \"fmt\"\n\ntype User struct {\n    Name string\n    Age  int\n}\n\nfunc processUser(user User) {\n    fmt.Printf(\"Processing %s\\\\n\", user.Name)\n}`\n    };\n    return migrations[toLang] || `// Migra√ß√£o para ${toLang}\\n// ${code}`;\n  }\n  static {\n    this.…µfac = function McpService_Factory(t) {\n      return new (t || McpService)(i0.…µ…µinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.…µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n      token: McpService,\n      factory: McpService.…µfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["McpService","constructor","http","mcpEndpoint","sendMigrationRequest","code","fromLang","toLang","_this","_asyncToGenerator","prompt","simulateResponse","error","Error","generateMockMigration","migrations","i0","…µ…µinject","i1","HttpClient","factory","…µfac","providedIn"],"sources":["/workspaces/amazon-q-developer-challenge/src/app/services/mcp.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class McpService {\n  private mcpEndpoint = 'ws://localhost:3000/mcp'; // MCP WebSocket endpoint\n\n  constructor(private http: HttpClient) {}\n\n  async sendMigrationRequest(code: string, fromLang: string, toLang: string): Promise<string> {\n    // Simula√ß√£o da conex√£o MCP - substitua pela implementa√ß√£o real\n    const prompt = `Migre este c√≥digo de ${fromLang} para ${toLang}:\\n\\n${code}`;\n    \n    try {\n      // Aqui voc√™ conectaria com o MCP real da AWS\n      // const response = await this.connectToMCP(prompt);\n      \n      // Simula√ß√£o por enquanto\n      return this.simulateResponse(code, fromLang, toLang);\n    } catch (error) {\n      throw new Error('Falha na conex√£o com MCP');\n    }\n  }\n\n  private simulateResponse(code: string, fromLang: string, toLang: string): string {\n    return `// Migra√ß√£o de ${fromLang} para ${toLang}\n// C√≥digo original analisado e convertido\n\n${this.generateMockMigration(code, toLang)}\n\n// ‚úÖ Migra√ß√£o conclu√≠da\n// üí° Dica: Revise as diferen√ßas de sintaxe e bibliotecas`;\n  }\n\n  private generateMockMigration(code: string, toLang: string): string {\n    const migrations: { [key: string]: string } = {\n      'typescript': `// TypeScript version\ninterface User {\n  name: string;\n  age: number;\n}\n\nconst processUser = (user: User): void => {\n  console.log(\\`Processing \\${user.name}\\`);\n};`,\n      'python': `# Python version\nfrom typing import Dict, Any\n\ndef process_user(user: Dict[str, Any]) -> None:\n    print(f\"Processing {user['name']}\")`,\n      'go': `// Go version\npackage main\n\nimport \"fmt\"\n\ntype User struct {\n    Name string\n    Age  int\n}\n\nfunc processUser(user User) {\n    fmt.Printf(\"Processing %s\\\\n\", user.Name)\n}`\n    };\n\n    return migrations[toLang] || `// Migra√ß√£o para ${toLang}\\n// ${code}`;\n  }\n}"],"mappings":";;;AAMA,OAAM,MAAOA,UAAU;EAGrBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,WAAW,GAAG,yBAAyB,CAAC,CAAC;EAEV;EAEjCC,oBAAoBA,CAACC,IAAY,EAAEC,QAAgB,EAAEC,MAAc;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACvE;MACA,MAAMC,MAAM,GAAG,wBAAwBJ,QAAQ,SAASC,MAAM,QAAQF,IAAI,EAAE;MAE5E,IAAI;QACF;QACA;QAEA;QACA,OAAOG,KAAI,CAACG,gBAAgB,CAACN,IAAI,EAAEC,QAAQ,EAAEC,MAAM,CAAC;OACrD,CAAC,OAAOK,KAAK,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;;IAC5C;EACH;EAEQF,gBAAgBA,CAACN,IAAY,EAAEC,QAAgB,EAAEC,MAAc;IACrE,OAAO,kBAAkBD,QAAQ,SAASC,MAAM;;;EAGlD,IAAI,CAACO,qBAAqB,CAACT,IAAI,EAAEE,MAAM,CAAC;;;0DAGgB;EACxD;EAEQO,qBAAqBA,CAACT,IAAY,EAAEE,MAAc;IACxD,MAAMQ,UAAU,GAA8B;MAC5C,YAAY,EAAE;;;;;;;;GAQjB;MACG,QAAQ,EAAE;;;;wCAIwB;MAClC,IAAI,EAAE;;;;;;;;;;;;;KAaP;IAED,OAAOA,UAAU,CAACR,MAAM,CAAC,IAAI,oBAAoBA,MAAM,QAAQF,IAAI,EAAE;EACvE;;;uBA9DWL,UAAU,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAVnB,UAAU;MAAAoB,OAAA,EAAVpB,UAAU,CAAAqB,IAAA;MAAAC,UAAA,EAFT;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}