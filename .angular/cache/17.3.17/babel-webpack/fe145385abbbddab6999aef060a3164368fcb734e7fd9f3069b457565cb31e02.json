{"ast":null,"code":"import _asyncToGenerator from \"/workspaces/amazon-q-developer-challenge/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BedrockRuntimeClient, InvokeModelCommand } from '@aws-sdk/client-bedrock-runtime';\nimport { fromCognitoIdentityPool } from '@aws-sdk/credential-providers';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class McpService {\n  constructor(http) {\n    this.http = http;\n    this.modelId = 'anthropic.claude-3-sonnet-20240229-v1:0';\n    this.identityPoolId = 'us-east-1:YOUR_IDENTITY_POOL_ID'; // Configure seu Identity Pool ID\n    this.bedrockClient = new BedrockRuntimeClient({\n      region: 'us-east-1',\n      credentials: fromCognitoIdentityPool({\n        identityPoolId: this.identityPoolId\n      })\n    });\n  }\n  sendMigrationRequest(code, fromLang, toLang) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const prompt = `Voc√™ √© um especialista em migra√ß√£o de c√≥digo. Migre este c√≥digo de ${fromLang} para ${toLang}:\\n\\n${code}\\n\\nResponda apenas com o c√≥digo migrado.`;\n      try {\n        // Para produ√ß√£o, configure AWS credentials via AWS Cognito ou API Gateway\n        const response = yield _this.callBedrock(prompt);\n        return response;\n      } catch (error) {\n        // Fallback para simula√ß√£o se AWS n√£o estiver configurada\n        return _this.simulateResponse(code, fromLang, toLang);\n      }\n    })();\n  }\n  callBedrock(prompt) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const command = new InvokeModelCommand({\n        modelId: _this2.modelId,\n        body: JSON.stringify({\n          anthropic_version: \"bedrock-2023-05-31\",\n          max_tokens: 2000,\n          messages: [{\n            role: \"user\",\n            content: prompt\n          }]\n        }),\n        contentType: \"application/json\"\n      });\n      const response = yield _this2.bedrockClient.send(command);\n      const result = JSON.parse(new TextDecoder().decode(response.body));\n      return result.content[0].text;\n    })();\n  }\n  simulateResponse(code, fromLang, toLang) {\n    return `// ü§ñ Migra√ß√£o simulada de ${fromLang} para ${toLang}\n// Para usar IA real, configure AWS Bedrock\n\n${this.generateMockMigration(code, toLang)}\n\n// ‚úÖ Migra√ß√£o conclu√≠da (simulada)\n// üí° Configure AWS credentials para IA real`;\n  }\n  generateMockMigration(code, toLang) {\n    const migrations = {\n      'typescript': `// TypeScript version\ninterface User {\n  name: string;\n  age: number;\n}\n\nconst processUser = (user: User): void => {\n  console.log(\\`Processing \\${user.name}\\`);\n};`,\n      'python': `# Python version\nfrom typing import Dict, Any\n\ndef process_user(user: Dict[str, Any]) -> None:\n    print(f\"Processing {user['name']}\")`,\n      'go': `// Go version\npackage main\n\nimport \"fmt\"\n\ntype User struct {\n    Name string\n    Age  int\n}\n\nfunc processUser(user User) {\n    fmt.Printf(\"Processing %s\\\\n\", user.Name)\n}`\n    };\n    return migrations[toLang] || `// Migra√ß√£o para ${toLang}\\n// ${code}`;\n  }\n  static {\n    this.…µfac = function McpService_Factory(t) {\n      return new (t || McpService)(i0.…µ…µinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.…µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n      token: McpService,\n      factory: McpService.…µfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BedrockRuntimeClient","InvokeModelCommand","fromCognitoIdentityPool","McpService","constructor","http","modelId","identityPoolId","bedrockClient","region","credentials","sendMigrationRequest","code","fromLang","toLang","_this","_asyncToGenerator","prompt","response","callBedrock","error","simulateResponse","_this2","command","body","JSON","stringify","anthropic_version","max_tokens","messages","role","content","contentType","send","result","parse","TextDecoder","decode","text","generateMockMigration","migrations","i0","…µ…µinject","i1","HttpClient","factory","…µfac","providedIn"],"sources":["/workspaces/amazon-q-developer-challenge/src/app/services/mcp.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { BedrockRuntimeClient, InvokeModelCommand } from '@aws-sdk/client-bedrock-runtime';\nimport { fromCognitoIdentityPool } from '@aws-sdk/credential-providers';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class McpService {\n  private bedrockClient: BedrockRuntimeClient;\n  private modelId = 'anthropic.claude-3-sonnet-20240229-v1:0';\n  private identityPoolId = 'us-east-1:YOUR_IDENTITY_POOL_ID'; // Configure seu Identity Pool ID\n\n  constructor(private http: HttpClient) {\n    this.bedrockClient = new BedrockRuntimeClient({\n      region: 'us-east-1',\n      credentials: fromCognitoIdentityPool({\n        identityPoolId: this.identityPoolId\n      })\n    });\n  }\n\n  async sendMigrationRequest(code: string, fromLang: string, toLang: string): Promise<string> {\n    const prompt = `Voc√™ √© um especialista em migra√ß√£o de c√≥digo. Migre este c√≥digo de ${fromLang} para ${toLang}:\\n\\n${code}\\n\\nResponda apenas com o c√≥digo migrado.`;\n    \n    try {\n      // Para produ√ß√£o, configure AWS credentials via AWS Cognito ou API Gateway\n      const response = await this.callBedrock(prompt);\n      return response;\n    } catch (error) {\n      // Fallback para simula√ß√£o se AWS n√£o estiver configurada\n      return this.simulateResponse(code, fromLang, toLang);\n    }\n  }\n\n  private async callBedrock(prompt: string): Promise<string> {\n    const command = new InvokeModelCommand({\n      modelId: this.modelId,\n      body: JSON.stringify({\n        anthropic_version: \"bedrock-2023-05-31\",\n        max_tokens: 2000,\n        messages: [{ role: \"user\", content: prompt }]\n      }),\n      contentType: \"application/json\"\n    });\n\n    const response = await this.bedrockClient.send(command);\n    const result = JSON.parse(new TextDecoder().decode(response.body));\n    return result.content[0].text;\n  }\n\n  private simulateResponse(code: string, fromLang: string, toLang: string): string {\n    return `// ü§ñ Migra√ß√£o simulada de ${fromLang} para ${toLang}\n// Para usar IA real, configure AWS Bedrock\n\n${this.generateMockMigration(code, toLang)}\n\n// ‚úÖ Migra√ß√£o conclu√≠da (simulada)\n// üí° Configure AWS credentials para IA real`;\n  }\n\n  private generateMockMigration(code: string, toLang: string): string {\n    const migrations: { [key: string]: string } = {\n      'typescript': `// TypeScript version\ninterface User {\n  name: string;\n  age: number;\n}\n\nconst processUser = (user: User): void => {\n  console.log(\\`Processing \\${user.name}\\`);\n};`,\n      'python': `# Python version\nfrom typing import Dict, Any\n\ndef process_user(user: Dict[str, Any]) -> None:\n    print(f\"Processing {user['name']}\")`,\n      'go': `// Go version\npackage main\n\nimport \"fmt\"\n\ntype User struct {\n    Name string\n    Age  int\n}\n\nfunc processUser(user User) {\n    fmt.Printf(\"Processing %s\\\\n\", user.Name)\n}`\n    };\n\n    return migrations[toLang] || `// Migra√ß√£o para ${toLang}\\n// ${code}`;\n  }\n}"],"mappings":";AAEA,SAASA,oBAAoB,EAAEC,kBAAkB,QAAQ,iCAAiC;AAC1F,SAASC,uBAAuB,QAAQ,+BAA+B;;;AAKvE,OAAM,MAAOC,UAAU;EAKrBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,OAAO,GAAG,yCAAyC;IACnD,KAAAC,cAAc,GAAG,iCAAiC,CAAC,CAAC;IAG1D,IAAI,CAACC,aAAa,GAAG,IAAIR,oBAAoB,CAAC;MAC5CS,MAAM,EAAE,WAAW;MACnBC,WAAW,EAAER,uBAAuB,CAAC;QACnCK,cAAc,EAAE,IAAI,CAACA;OACtB;KACF,CAAC;EACJ;EAEMI,oBAAoBA,CAACC,IAAY,EAAEC,QAAgB,EAAEC,MAAc;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACvE,MAAMC,MAAM,GAAG,sEAAsEJ,QAAQ,SAASC,MAAM,QAAQF,IAAI,2CAA2C;MAEnK,IAAI;QACF;QACA,MAAMM,QAAQ,SAASH,KAAI,CAACI,WAAW,CAACF,MAAM,CAAC;QAC/C,OAAOC,QAAQ;OAChB,CAAC,OAAOE,KAAK,EAAE;QACd;QACA,OAAOL,KAAI,CAACM,gBAAgB,CAACT,IAAI,EAAEC,QAAQ,EAAEC,MAAM,CAAC;;IACrD;EACH;EAEcK,WAAWA,CAACF,MAAc;IAAA,IAAAK,MAAA;IAAA,OAAAN,iBAAA;MACtC,MAAMO,OAAO,GAAG,IAAItB,kBAAkB,CAAC;QACrCK,OAAO,EAAEgB,MAAI,CAAChB,OAAO;QACrBkB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,iBAAiB,EAAE,oBAAoB;UACvCC,UAAU,EAAE,IAAI;UAChBC,QAAQ,EAAE,CAAC;YAAEC,IAAI,EAAE,MAAM;YAAEC,OAAO,EAAEd;UAAM,CAAE;SAC7C,CAAC;QACFe,WAAW,EAAE;OACd,CAAC;MAEF,MAAMd,QAAQ,SAASI,MAAI,CAACd,aAAa,CAACyB,IAAI,CAACV,OAAO,CAAC;MACvD,MAAMW,MAAM,GAAGT,IAAI,CAACU,KAAK,CAAC,IAAIC,WAAW,EAAE,CAACC,MAAM,CAACnB,QAAQ,CAACM,IAAI,CAAC,CAAC;MAClE,OAAOU,MAAM,CAACH,OAAO,CAAC,CAAC,CAAC,CAACO,IAAI;IAAC;EAChC;EAEQjB,gBAAgBA,CAACT,IAAY,EAAEC,QAAgB,EAAEC,MAAc;IACrE,OAAO,8BAA8BD,QAAQ,SAASC,MAAM;;;EAG9D,IAAI,CAACyB,qBAAqB,CAAC3B,IAAI,EAAEE,MAAM,CAAC;;;6CAGG;EAC3C;EAEQyB,qBAAqBA,CAAC3B,IAAY,EAAEE,MAAc;IACxD,MAAM0B,UAAU,GAA8B;MAC5C,YAAY,EAAE;;;;;;;;GAQjB;MACG,QAAQ,EAAE;;;;wCAIwB;MAClC,IAAI,EAAE;;;;;;;;;;;;;KAaP;IAED,OAAOA,UAAU,CAAC1B,MAAM,CAAC,IAAI,oBAAoBA,MAAM,QAAQF,IAAI,EAAE;EACvE;;;uBArFWT,UAAU,EAAAsC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAVzC,UAAU;MAAA0C,OAAA,EAAV1C,UAAU,CAAA2C,IAAA;MAAAC,UAAA,EAFT;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}