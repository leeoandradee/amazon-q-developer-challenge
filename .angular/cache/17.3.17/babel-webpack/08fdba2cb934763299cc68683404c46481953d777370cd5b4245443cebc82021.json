{"ast":null,"code":"import _asyncToGenerator from \"/workspaces/amazon-q-developer-challenge/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class McpService {\n  constructor(http) {\n    this.http = http;\n    this.bedrockEndpoint = 'https://bedrock-runtime.us-east-1.amazonaws.com';\n    this.modelId = 'anthropic.claude-3-sonnet-20240229-v1:0';\n  }\n  sendMigrationRequest(code, fromLang, toLang) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const prompt = `Voc√™ √© um especialista em migra√ß√£o de c√≥digo. Migre este c√≥digo de ${fromLang} para ${toLang}:\\n\\n${code}\\n\\nResponda apenas com o c√≥digo migrado.`;\n      try {\n        // Para produ√ß√£o, configure AWS credentials via AWS Cognito ou API Gateway\n        const response = yield _this.callBedrock(prompt);\n        return response;\n      } catch (error) {\n        // Fallback para simula√ß√£o se AWS n√£o estiver configurada\n        return _this.simulateResponse(code, fromLang, toLang);\n      }\n    })();\n  }\n  callBedrock(prompt) {\n    return _asyncToGenerator(function* () {\n      // Esta implementa√ß√£o requer configura√ß√£o de credenciais AWS\n      // Para desenvolvimento, use AWS Cognito ou API Gateway como proxy\n      const body = {\n        anthropic_version: \"bedrock-2023-05-31\",\n        max_tokens: 2000,\n        messages: [{\n          role: \"user\",\n          content: prompt\n        }]\n      };\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n        // Adicione headers de autentica√ß√£o AWS aqui\n      });\n      // Por enquanto, simula resposta at√© configurar credenciais\n      throw new Error('AWS n√£o configurada - usando simula√ß√£o');\n    })();\n  }\n  simulateResponse(code, fromLang, toLang) {\n    return `// ü§ñ Migra√ß√£o simulada de ${fromLang} para ${toLang}\n// Para usar IA real, configure AWS Bedrock\n\n${this.generateMockMigration(code, toLang)}\n\n// ‚úÖ Migra√ß√£o conclu√≠da (simulada)\n// üí° Configure AWS credentials para IA real`;\n  }\n  generateMockMigration(code, toLang) {\n    const migrations = {\n      'typescript': `// TypeScript version\ninterface User {\n  name: string;\n  age: number;\n}\n\nconst processUser = (user: User): void => {\n  console.log(\\`Processing \\${user.name}\\`);\n};`,\n      'python': `# Python version\nfrom typing import Dict, Any\n\ndef process_user(user: Dict[str, Any]) -> None:\n    print(f\"Processing {user['name']}\")`,\n      'go': `// Go version\npackage main\n\nimport \"fmt\"\n\ntype User struct {\n    Name string\n    Age  int\n}\n\nfunc processUser(user User) {\n    fmt.Printf(\"Processing %s\\\\n\", user.Name)\n}`\n    };\n    return migrations[toLang] || `// Migra√ß√£o para ${toLang}\\n// ${code}`;\n  }\n  static {\n    this.…µfac = function McpService_Factory(t) {\n      return new (t || McpService)(i0.…µ…µinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.…µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n      token: McpService,\n      factory: McpService.…µfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","McpService","constructor","http","bedrockEndpoint","modelId","sendMigrationRequest","code","fromLang","toLang","_this","_asyncToGenerator","prompt","response","callBedrock","error","simulateResponse","body","anthropic_version","max_tokens","messages","role","content","headers","Error","generateMockMigration","migrations","i0","…µ…µinject","i1","HttpClient","factory","…µfac","providedIn"],"sources":["/workspaces/amazon-q-developer-challenge/src/app/services/mcp.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class McpService {\n  private bedrockEndpoint = 'https://bedrock-runtime.us-east-1.amazonaws.com';\n  private modelId = 'anthropic.claude-3-sonnet-20240229-v1:0';\n\n  constructor(private http: HttpClient) {}\n\n  async sendMigrationRequest(code: string, fromLang: string, toLang: string): Promise<string> {\n    const prompt = `Voc√™ √© um especialista em migra√ß√£o de c√≥digo. Migre este c√≥digo de ${fromLang} para ${toLang}:\\n\\n${code}\\n\\nResponda apenas com o c√≥digo migrado.`;\n    \n    try {\n      // Para produ√ß√£o, configure AWS credentials via AWS Cognito ou API Gateway\n      const response = await this.callBedrock(prompt);\n      return response;\n    } catch (error) {\n      // Fallback para simula√ß√£o se AWS n√£o estiver configurada\n      return this.simulateResponse(code, fromLang, toLang);\n    }\n  }\n\n  private async callBedrock(prompt: string): Promise<string> {\n    // Esta implementa√ß√£o requer configura√ß√£o de credenciais AWS\n    // Para desenvolvimento, use AWS Cognito ou API Gateway como proxy\n    const body = {\n      anthropic_version: \"bedrock-2023-05-31\",\n      max_tokens: 2000,\n      messages: [{ role: \"user\", content: prompt }]\n    };\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      // Adicione headers de autentica√ß√£o AWS aqui\n    });\n\n    // Por enquanto, simula resposta at√© configurar credenciais\n    throw new Error('AWS n√£o configurada - usando simula√ß√£o');\n  }\n\n  private simulateResponse(code: string, fromLang: string, toLang: string): string {\n    return `// ü§ñ Migra√ß√£o simulada de ${fromLang} para ${toLang}\n// Para usar IA real, configure AWS Bedrock\n\n${this.generateMockMigration(code, toLang)}\n\n// ‚úÖ Migra√ß√£o conclu√≠da (simulada)\n// üí° Configure AWS credentials para IA real`;\n  }\n\n  private generateMockMigration(code: string, toLang: string): string {\n    const migrations: { [key: string]: string } = {\n      'typescript': `// TypeScript version\ninterface User {\n  name: string;\n  age: number;\n}\n\nconst processUser = (user: User): void => {\n  console.log(\\`Processing \\${user.name}\\`);\n};`,\n      'python': `# Python version\nfrom typing import Dict, Any\n\ndef process_user(user: Dict[str, Any]) -> None:\n    print(f\"Processing {user['name']}\")`,\n      'go': `// Go version\npackage main\n\nimport \"fmt\"\n\ntype User struct {\n    Name string\n    Age  int\n}\n\nfunc processUser(user User) {\n    fmt.Printf(\"Processing %s\\\\n\", user.Name)\n}`\n    };\n\n    return migrations[toLang] || `// Migra√ß√£o para ${toLang}\\n// ${code}`;\n  }\n}"],"mappings":";AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAK9D,OAAM,MAAOC,UAAU;EAIrBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,eAAe,GAAG,iDAAiD;IACnE,KAAAC,OAAO,GAAG,yCAAyC;EAEpB;EAEjCC,oBAAoBA,CAACC,IAAY,EAAEC,QAAgB,EAAEC,MAAc;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACvE,MAAMC,MAAM,GAAG,sEAAsEJ,QAAQ,SAASC,MAAM,QAAQF,IAAI,2CAA2C;MAEnK,IAAI;QACF;QACA,MAAMM,QAAQ,SAASH,KAAI,CAACI,WAAW,CAACF,MAAM,CAAC;QAC/C,OAAOC,QAAQ;OAChB,CAAC,OAAOE,KAAK,EAAE;QACd;QACA,OAAOL,KAAI,CAACM,gBAAgB,CAACT,IAAI,EAAEC,QAAQ,EAAEC,MAAM,CAAC;;IACrD;EACH;EAEcK,WAAWA,CAACF,MAAc;IAAA,OAAAD,iBAAA;MACtC;MACA;MACA,MAAMM,IAAI,GAAG;QACXC,iBAAiB,EAAE,oBAAoB;QACvCC,UAAU,EAAE,IAAI;QAChBC,QAAQ,EAAE,CAAC;UAAEC,IAAI,EAAE,MAAM;UAAEC,OAAO,EAAEV;QAAM,CAAE;OAC7C;MAED,MAAMW,OAAO,GAAG,IAAIvB,WAAW,CAAC;QAC9B,cAAc,EAAE;QAChB;OACD,CAAC;MAEF;MACA,MAAM,IAAIwB,KAAK,CAAC,wCAAwC,CAAC;IAAC;EAC5D;EAEQR,gBAAgBA,CAACT,IAAY,EAAEC,QAAgB,EAAEC,MAAc;IACrE,OAAO,8BAA8BD,QAAQ,SAASC,MAAM;;;EAG9D,IAAI,CAACgB,qBAAqB,CAAClB,IAAI,EAAEE,MAAM,CAAC;;;6CAGG;EAC3C;EAEQgB,qBAAqBA,CAAClB,IAAY,EAAEE,MAAc;IACxD,MAAMiB,UAAU,GAA8B;MAC5C,YAAY,EAAE;;;;;;;;GAQjB;MACG,QAAQ,EAAE;;;;wCAIwB;MAClC,IAAI,EAAE;;;;;;;;;;;;;KAaP;IAED,OAAOA,UAAU,CAACjB,MAAM,CAAC,IAAI,oBAAoBA,MAAM,QAAQF,IAAI,EAAE;EACvE;;;uBA/EWN,UAAU,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAV7B,UAAU;MAAA8B,OAAA,EAAV9B,UAAU,CAAA+B,IAAA;MAAAC,UAAA,EAFT;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}